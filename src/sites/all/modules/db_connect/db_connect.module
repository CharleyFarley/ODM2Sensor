<?php

function db_connect_views_api() {
   return array(
      'api' => 3,
   );
}

// Populates a list from the database using the given parameters
function create_list($table_name, $item_id, $item_label, $field_name, &$form, $more = 0){
  $options = array();

  //Adds more options
  if($more == 1){
    $options['-1'] = 'New...';
  }
  else if($more == 2){
    $options[NULL] = 'None';
  }
  else if($more == 3){
    $options['-1'] = 'New...';
    $options[NULL] = 'None';
  }

  db_set_active('iutah_equipment');
  $result = db_select($table_name, 't')->fields('t')->orderBy($item_label, 'ASC')->execute();
  db_set_active();
  for ($index = 0; $index < $result->rowCount(); $index++){
    $item = $result->fetchObject();
    $options[$item->$item_id] = $item->$item_label;
  }
  $form[$field_name]['und']['#options'] = $options;
  $form[$field_name]['und']['#default_value'] = NULL;
  db_set_active();
}

// Runs a select query with the given arguments and returns the object
function getItem($table_name, $item_id, $id_field_name){
  $options = array();
  db_set_active('iutah_equipment');
  $result = db_select($table_name, 't')
  ->condition($id_field_name , $item_id, '=')
  ->fields('t')->execute();
  db_set_active();
  
  $item = $result->fetchObject();

  db_set_active();
  return $item;
}

// Custom print for testing purposes
function prnt($element){
  print "<pre>";
  print_r($element);
  print "</pre>";
}

// Custom validation rules
function select_text_validate($element, &$form_state, $form) {
  $value = $element[0]['value']['#value'];
  $fieldName = $element[0]['#field_name'];

  // Site Type Term - Create New Site form
  if($fieldName == 'field_site_type_term' ){
    $item = getItem('sitetypecv', $value, 'Term');
    if ($item != NULL){
      form_error($element, t('The Term \'' .$value. '\' already exists.'));
    }
  }
  // Site Type Term - Create New Site Type form
  else if($fieldName == 'field_term' && $form['#bundle'] == 'create_new_site_type'){
    $value = $element[0]['value']['#value'];
    $item = getItem('sitetypecv', $value, 'Term');
    if ($item != NULL){
      form_error($element, t('The Term \'' .$value. '\' already exists.'));
    }
  }
  // Deployment Type Term - Create New Deployment Type form
  else if($fieldName == 'field_term'  && $form['#bundle'] == 'create_new_deployment_type'){
    $value = $element[0]['value']['#value'];
    $item = getItem('deploymenttypecv', $value, 'Term');
    if ($item != NULL){
      form_error($element, t('The Term \'' .$value. '\' already exists.'));
    }
  }
  // Deployment Type Term - Create New Deployment form
  else if($fieldName == 'field_deployment_type_term' && $form['#bundle'] == 'create_new_deployment'){
    $value = $element[0]['value']['#value'];
    $item = getItem('deploymenttypecv', $value, 'Term');
    if ($item != NULL){
      form_error($element, t('The Deployment Type Term \'' .$value. '\' already exists.'));
    }
  }
  // Activity Type Term - Create New Field Activity form
  else if($fieldName == 'field_activity_type_term'){
    $value = $element[0]['value']['#value'];
    $item = getItem('activitytypecv', $value, 'Term');
    if ($item != NULL){
      form_error($element, t('The Term \'' .$value. '\' already exists.'));
    }
  }
  // Activity Type Term - Create New Activity Type form
  else if($fieldName == 'field_term' && $form['#bundle'] == 'create_new_activity_type'){
    $value = $element[0]['value']['#value'];
    $item = getItem('activitytypecv', $value, 'Term');
    if ($item != NULL){
      form_error($element, t('The Term \'' .$value. '\' already exists.'));
    }
  }
  // Equipment Type Term - Create New Equipment form
  else if($fieldName == 'field_equipment_type_term' ){
    $value = $element[0]['value']['#value'];
    $item = getItem('equipmenttypecv', $value, 'Term');
    if ($item != NULL){
      form_error($element, t('The Term \'' .$value. '\' already exists.'));
    }
  }
  // Equipment Type Term - Create New Equipment Type form
  else if($fieldName == 'field_term' && $form['#bundle'] == 'create_new_equipment_type'){
    $value = $element[0]['value']['#value'];
    $item = getItem('equipmenttypecv', $value, 'Term');
    if ($item != NULL){
      form_error($element, t('The Term \'' .$value. '\' already exists.'));
    }
  }
  // Calibration Standard Type Term
  else if($fieldName == 'field_term' && $form['#bundle'] == 'create_new_calibration_std_type'){
    $value = $element[0]['value']['#value'];
    $item = getItem('calibrationstandardtypecv', $value, 'Term');
    if ($item != NULL){
      form_error($element, t('The Term \'' .$value. '\' already exists.'));
    }
  }
  // Vendor Type Term
  else if($fieldName == 'field_term' && $form['#bundle'] == 'create_new_vendor_type'){
    $value = $element[0]['value']['#value'];
    $item = getItem('vendortypecv', $value, 'Term');
    if ($item != NULL){
      form_error($element, t('The Term \'' .$value. '\' already exists.'));
    }
  }
}

  function taxonomy_term_get_by_vid($vid) {
    $query = new EntityFieldQuery();
    $result = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', (int) $vid, '=')
    ->execute();
    return $result['taxonomy_term'];
  }
/**
* Implements hook_form_alter().
*/
function db_connect_form_alter(&$form, &$form_state, $form_id){
  // -------------- Create New Site --------------------------
  if($form_id == "create_new_site_entityform_edit_form" ){
    // Site Type
    create_list('sitetypecv', 'Term', 'Term', 'field_site_type', $form, 3);

    // Site Group 
    create_list('sitegroups', 'SiteGroupID', 'SiteGroupName', 'field_watershed', $form, 3);
    
    if (isset($_GET["entityId"])) {
      $form['entityID'] = array(
        '#value' => $_GET["entityId"],
        '#type' => 'hidden',
      );
      // Edit button text
      $form['actions']['submit']['#value'] = "Save Changes";
      // Edit title
      drupal_set_title("Edit Site Information");
      $entity = getItem('sites', $_GET["entityId"], 'SiteID');

      if($entity != NULL){
        $form["field_site_code"]['und'][0]['value']['#default_value'] = $entity->SiteCode;
        $form["field_site_name"]['und'][0]['value']['#default_value'] = $entity->SiteName;
        $form["field_latitude"]['und'][0]['value']['#default_value'] = $entity->Latitude;
        $form["field_longitude"]['und'][0]['value']['#default_value'] = $entity->Longitude;
        $form["field_lat_long_datum"]['und'][0]['value']['#default_value'] = $entity->LatLongDatum;
        $form["field_elevation"]['und'][0]['value']['#default_value'] = $entity->Elevation;

        // Get the array key
        $key = array_keys($form["field_vertical_datum"]['und']['#options'], $entity->VerticalDatum);
        if($key != NULL){
          $form["field_vertical_datum"]['und']['#default_value'] = $key['0'];
        }
        
        // floats
        $form["field_local_x"]['und'][0]['value']['#default_value'] = $entity->LocalX;
        $form["field_local_y"]['und'][0]['value']['#default_value'] = $entity->LocalY;
        $form["field_position_accuracy"]['und'][0]['value']['#default_value'] = $entity->PosAccuracy_m;
        $form["field_local_projection"]['und'][0]['value']['#default_value'] = $entity->LocalProjection;
        $form["field_state"]['und'][0]['value']['#default_value'] = $entity->State;
        $form["field_county"]['und'][0]['value']['#default_value'] = $entity->County;
        $form["field_site_notes"]['und'][0]['value']['#default_value'] = $entity->Comments;
        // select lists
        $form["field_site_type"]['und']['#default_value'] = $entity->SiteType;
        $form["field_watershed"]['und']['#default_value'] = $entity->SiteGroup;
      }
    }
    else{
      // Site Type Term
      $form['field_site_type_term']['und']['#element_validate'] = array('select_text_validate');
    }
  }
  // ------------- Create New Site Visit -------------------
  else if($form_id == "create_new_site_visit_entityform_edit_form" ){
    // Site Names
    create_list('sites', 'SiteID', 'SiteName', 'field_sites', $form);

    // Crew
    $options = array();
    db_set_active('iutah_equipment');
    $result = db_select('people', 'p')->fields('p')->execute();
    db_set_active();
    for ($index = 0; $index < $result->rowCount(); $index++){
      $item = $result->fetchObject();
      $options[$item->PersonID] = $item->PersonFirstName . " " . $item->PersonLastName;
    }
    db_set_active();
    $form['field_crew']['und']['#options'] = $options;
    $form['field_crew']['und']['#multiple'] = TRUE;


    // Add 'required' class since the module wont do it due to an error
    $form['field_begin_date_time']['#attributes']['class'][]  = 'required';
    $form['field_end_date_time']['#attributes']['class'][]  = 'required';

    // Pre loads
    if (isset($_GET["SiteID"])){
      $entity = getItem('sites', $_GET["SiteID"], 'SiteID');
      if($entity != NULL){
        //drupal_set_title('Create New Site Visit at ' . $entity->SiteName);
        $form["field_sites"]['und']['#default_value'] = $_GET["SiteID"];   
      }
    }

    if (isset($_GET["entityId"])) {
      $form['entityID'] = array(
        '#value' => $_GET["entityId"],
        '#type' => 'hidden',
      );
      // Edit button and title
      $form['actions']['submit']['#value'] = "Save Changes";
      drupal_set_title("Edit Site Visit Information");

      $entity = getItem('sitevisitsview', $_GET["entityId"], 'sitevisitid');

      if ($entity != NULL){
        $form["field_environmental_observations"]['und'][0]['value']['#default_value'] = $entity->sitevisitenvironmentalobservations;
        $form["field_notes"]['und'][0]['value']['#default_value'] = $entity->sitevisitnotes;
        $form["field_begin_date_time"]['und'][0]['#default_value']['value'] = date($entity->BeginDateRaw);
        $form["field_end_date_time"]['und'][0]['#default_value']['value'] = date($entity->EndDateRaw);
        $form["field_utc_offset"]['und']['#default_value'] = $entity->sitevisitutcoffset;
        // Crew
        $crew = array();
        db_set_active('iutah_equipment');
        $result = db_select('sitevisitpeople', 's')
          ->condition('SiteVisitID', $entity
          ->sitevisitid, '=')->fields('s')
          ->execute();
        db_set_active();
        for ($index = 0; $index < $result->rowCount(); $index++){
          $item = $result->fetchObject();
          $crew[] = $item->PersonID;
        }
        $form["field_crew"]['und']['#default_value'] = $crew;
        //site
        $form["field_sites"]['und']['#default_value'] = $entity->siteid;
      } 
    }
  }
  //-------------- Create New Equipment -------------------
  else if($form_id == "create_new_equipment_entityform_edit_form" ){
    // Type
    create_list('equipmenttypecv', 'Term', 'Term', 'field_type', $form, 1);

    // Model
    create_list('equipmentmodels', 'ModelID', 'ModelName', 'field_model', $form, 1);

    // Vendor
    create_list('vendors', 'VendorID', 'VendorName', 'field_vendor', $form, 1);

    // Vendor Type
    create_list('vendortypecv', 'Term', 'Term', 'field_vendor_type', $form);

    // Manufacturer
    create_list('vendors', 'VendorID', 'VendorName', 'field_manufacturer', $form, 1);

    // Manufacturer Type
    create_list('vendortypecv', 'Term', 'Term', 'field_manufacturer_type', $form);
    // Append 'Same as vendor' to the beginning without changing other keys
    $form['field_manufacturer']['und']['#options'] = array('-2' => '- Same as vendor -') + $form['field_manufacturer']['und']['#options'];

    // Owner
    $options = array();
    $options[NULL] = "None";
    $options[-1] = "New...";
    db_set_active('iutah_equipment');
    $result = db_select('people', 't')->fields('t')->execute();
    db_set_active();
    for ($index = 0; $index < $result->rowCount(); $index++){
      $item = $result->fetchObject();
      $options[$item->PersonID] = $item->PersonFirstName . " " . $item->PersonLastName;
    }
    $form['field_owner']['und']['#options'] = $options;
    $form['field_owner']['und']['#default_value'] = NULL;

    

    // preloads
    //VendorID
    if (isset($_GET["VendorID"])) {
      $form["field_vendor"]['und']['#default_value'] = $_GET["VendorID"];
    }
    if (isset($_GET["entityId"])) {
      $form['entityID'] = array(
        '#value' => $_GET["entityId"],
        '#type' => 'hidden',
      );

      // Edit button and title
      $form['actions']['submit']['#value'] = "Save Changes";
      drupal_set_title("Edit Equipment Information");

      $entity = getItem('equipment', $_GET["entityId"], 'EquipmentID');
      if($entity != NULL){
        // Text fields   
        $form["field_serial_number"]['und'][0]['value']['#default_value'] = $entity->EquipmentSerialNumber;
        $form["field_inventory_number"]['und'][0]['value']['#default_value'] = $entity->EquipmentInventoryNumber;
        $form["field_type"]['und']['#default_value'] = $entity->EquipmentType;
        $form["field_model"]['und']['#default_value'] = $entity->EquipmentModelID;
        $form["field_purchase_date"]['und'][0]['#default_value']['value'] = $entity->EquipmentPurchaseDate;
        $form["field_vendor"]['und']['#default_value'] = $entity->EquipmentVendorID;
        $form["field_owner"]['und']['#default_value'] = $entity->EquipmentOwnerID;
        $form["field_order_number"]['und'][0]['value']['#default_value'] = $entity->EquipmentPurchaseOrderNumber;
        $form["field_equipment_notes"]['und'][0]['value']['#default_value'] = $entity->EquipmentNotes;
      }
    }
    else{
      // Equipment Type Term
      $form['field_equipment_type_term']['und']['#element_validate'] = array('select_text_validate');
    }
  }
  // ------------ Create New Factory Service Event ---------------------
  else if($form_id == "create_new_factory_service_event_entityform_edit_form" ){
    // Equipment Serial Number
    $options = array();
    db_set_active('iutah_equipment');
    $result = db_select('equipmentview', 't')
    ->fields('t')
    ->execute();


    for ($index = 0; $index < $result->rowCount(); $index++){
      $item = $result->fetchObject();
      $options[$item->equipmentid] = $item->modelname . " (SN ". (string)$item->equipmentserialnumber . ")";
    }

    $form['field_equipment_serial_number']['und']['#options'] = $options;
    $form['field_equipment_serial_number']['und']['#default_value'] = NULL;
    db_set_active();

    // Vendors
    create_list('vendors', 'VendorID', 'VendorName', 'field_vendor', $form);

    if (isset($_GET["EquipmentID"])) {
      $entity = getItem('equipment', $_GET["EquipmentID"], 'EquipmentID');
      if($entity != NULL){
        $form["field_equipment_serial_number"]['und']['#default_value'] = $_GET["EquipmentID"];
      }
    }

    $form['field_date']['#attributes']['class'][]  = 'required';

    if (isset($_GET["entityId"])) {
      $form['entityID'] = array(
        '#value' => $_GET["entityId"],
        '#type' => 'hidden',
      );

      // Edit button and title
      $form['actions']['submit']['#value'] = "Save Changes";
      drupal_set_title("Edit Factory Service Information");

      $entity = getItem('factoryserviceevents', $_GET["entityId"], 'FactoryServiceEventID');
      if($entity != NULL){
        // Text fields   
        $form["field_equipment_serial_number"]['und']['#default_value'] = $entity->EquipmentID;
        $form["field_vendor"]['und']['#default_value'] = $entity->FactoryServiceVendorID;
        $form["field_date"]['und'][0]['#default_value']['value'] = date($entity->FactoryServiceDate);
        $form["field_request_code"]['und'][0]['value']['#default_value']  = $entity->FactoryServiceRequestCode;
        $form["field_service_description"]['und'][0]['value']['#default_value']  = $entity->FactoryServiceDescription;
        $form["field_service_reason"]['und'][0]['value']['#default_value']  = $entity->FactoryServiceReason;
        $form["field_service_notes"]['und'][0]['value']['#default_value']  = $entity->FactoryServiceNotes; 
      }
    }
  }
  // ------------ Create New Field Activity ---------------------
  else if($form_id == "create_new_field_activity_entityform_edit_form"){
    add_site_visit_picker($form, $form_state);
    // Activity Type
    $options = array();
    $options[-1] = 'New...';
    db_set_active('iutah_equipment');
    $result = db_select('activitytypecv', 't')
    ->fields('t')
    ->condition('Term', 'Deployment', '!=')
    ->condition('Term', 'Calibration', '!=')
    ->execute();
    db_set_active();
    for ($index = 0; $index < $result->rowCount(); $index++){
      $item = $result->fetchObject();
      $options[$item->Term] = $item->Term;
    }
    $form['field_activity_type']['und']['#options'] = $options;
    $form['field_activity_type']['und']['#default_value'] = NULL;


    //Date required
    $form['field_begin_date_time']['#attributes']['class'][]  = 'required';
    $form['field_end_date_time']['#attributes']['class'][]  = 'required';
    db_set_active();

    // preloads
    if (isset($_GET["sitevisit"])) {
      $entity = getItem('sitevisits', $_GET["sitevisit"], 'SiteVisitID');
      if($entity != NULL){
        $form["field_site_visit"]['und']['#default_value'] = $_GET["sitevisit"];
      }
    }

    if (isset($_GET["entityId"])) {
      $form['entityID'] = array(
        '#value' => $_GET["entityId"],
        '#type' => 'hidden',
      );

      // Edit button and title
      $form['actions']['submit']['#value'] = "Save Changes";
      drupal_set_title("Edit Field Activity Information");

      $entity = getItem('fieldactivityview', $_GET["entityId"], 'FieldActivityID');
      if($entity != NULL){
        // Text fields   
        $form["field_site_visit"]['und']['#default_value'] = $entity->sitevisitid;
        $form["field_activity_type"]['und']['#default_value'] = $entity->fieldactivitytype;
        $form["field_begin_date_time"]['und'][0]['#default_value']['value']= date($entity->BeginDateRaw);
        $form["field_end_date_time"]['und'][0]['#default_value']['value']= date($entity->EndDateRaw);
        $form["field_utc_offset"]['und']['#default_value'] = $entity->utcoffset;
        $form["field_description"]['und'][0]['value']['#default_value'] = $entity->fieldactivitydescription;
        $form["field_notes"]['und'][0]['value']['#default_value'] = $entity->notes;
      }
    }
    elseif (isset($_GET["sitevisit"])) {
      $form["field_site_visit"]['und']['#default_value'] = $_GET["sitevisit"];
      // Custom validation for field Term
      $form['field_activity_type_term']['und']['#element_validate'] = array('select_text_validate');
    }
    else{
      // Custom validation for field Term
      $form['field_activity_type_term']['und']['#element_validate'] = array('select_text_validate');
    }
  }
  // ------------ Create New Calibration ---------------------
  else if($form_id == "create_new_calibration_entityform_edit_form"){


    // Calibration Method
    create_list('calibrationmethods', 'CalibrationMethodID', 'CalibrationMethodName', 'field_calibration_method', $form, 1);

    // Measured Variable
    $options = array();
    $options[-1] = "New...";
    db_set_active('iutah_equipment');
    $result = db_select('MeasuredVariablePicker', 'f')
    ->fields('f')
    ->execute();
    db_set_active();

    for ($index = 0; $index < $result->rowCount(); $index++){
      $item = $result->fetchObject();
      $options[$item->DeploymentMeasuredVariableID] = $item->SensorVariableCode . " - " . $item->SensorVariableName;
    }
    $form['field_measured_variable']['und']['#options'] =  $options;
    $form['field_measured_variable']['und']['#default_value'] = NULL;

    // Sensor Output Variable
    $options = array();
    db_set_active('iutah_equipment');
    $result = db_select('sensoroutputvariables', 'f')
    ->fields('f')
    ->execute();
    db_set_active();

    for ($index = 0; $index < $result->rowCount(); $index++){
      $item = $result->fetchObject();
      $options[$item->SensorOutputVariableID] = $item->SensorVariableCode . " - " . $item->SensorVariableName;
    }
    $form['field_variable']['und']['#options'] =  $options;
    $form['field_variable']['und']['#default_value'] = NULL;


    // Calibration Standard
    $options = array();
    $options[NULL] = "None";
    $options[-1] = "New...";
    db_set_active('iutah_equipment');
    $result = db_select('CalibrationStandardPicker', 'csp')
    ->fields('csp')
    ->execute();
    db_set_active();

    for ($index = 0; $index < $result->rowCount(); $index++){
      $item = $result->fetchObject();
      $options[$item->CalibrationStandardID] = $item->VendorName . " - " . $item->CalibrationStandardType  ;
    }
    $form['field_calibration_standard']['und']['#options'] =  $options;
    $form['field_calibration_standard']['und']['#default_value'] = NULL;

    add_site_visit_picker($form, $form_state);
    add_equipment_filter($form, $form_state);
    add_measured_variable_filter($form, $form_state);

    // Vendor
    create_list('vendors', 'VendorID', 'VendorName', 'field_vendor', $form);

    // Standard Type
    create_list('calibrationstandardtypecv', 'Term', 'Term', 'field_type', $form);

    
    // Mark Date fields as required
    $form['field_begin_date_time']['#attributes']['class'][]  = 'required';
    $form['field_end_date_time']['#attributes']['class'][]  = 'required';


    // preloads
    if (isset($_GET["EquipmentID"])) {
      $entity = getItem('equipment', $_GET["EquipmentID"], 'EquipmentID');
      if($entity != NULL){
        $form["field_equipment_serial_number"]['und']['#default_value'] = $_GET["EquipmentID"];
      }
    }

    if (isset($_GET["sitevisit"])) {
      $entity = getItem('sitevisits', $_GET["sitevisit"], 'SiteVisitID');
      if($entity != NULL){
        $form["field_site_visit"]['und']['#default_value'] = $_GET["sitevisit"];
         //Filter Equipnent list
        $options = array();
        db_set_active('iutah_equipment');
        $result = db_select('deploymentsview', 't')
        ->fields('t')
        ->condition('currentlydeployed', 'Yes', '=')
        ->condition('SiteVisitID', $_GET["sitevisit"], '=')
        ->orderBy('equipmentserialnumber', 'ASC')
        ->execute();
        db_set_active();
        for ($index = 0; $index < $result->rowCount(); $index++){
          $item = $result->fetchObject();
          $options[$item->equipmentid] = $item->modelname . " (SN ". $item->equipmentserialnumber . ")";
        }

        $form['field_equipment_serial_number']['und']['#options'] = $options;
        $form['field_equipment_serial_number']['und']['#default_value'] = NULL;
      }
    }

    if (isset($_GET["entityId"])) {
      $form['entityID'] = array(
        '#value' => $_GET["entityId"],
        '#type' => 'hidden',
      );

      // Edit button and title
      $form['actions']['submit']['#value'] = "Save Changes";
      drupal_set_title("Edit Calibration Information");

      $entity = getItem('calibrationsview', $_GET["entityId"], 'CalibrationID');
      
      if($entity != NULL){
        $form["field_equipment_serial_number"]['und']['#default_value'] = $entity->equipmentid;
        $form["field_measured_variable"]['und']['#default_value'] = $entity->deploymentmeasuredvariableid;
        $form["field_calibration_method"]['und']['#default_value'] = $entity->calibrationmethodid;
        $form["field_calibration_standard"]['und']['#default_value']= $entity->calibrationstandardid;
        $form["field_checked_value"]['und'][0]['value']['#default_value'] = $entity->calibrationcheckvalue;
        $form["field_notes"]['und'][0]['value']['#default_value'] = $entity->calibrationnotes;
        $form["field_begin_date_time"]['und'][0]['#default_value']['value']= date($entity->BeginDateRaw);
        $form["field_end_date_time"]['und'][0]['#default_value']['value']= date($entity->EndDateRaw);
        $form['FieldActivityID'] = array(
          '#value' => $entity->FieldActivityID,
          '#type' => 'hidden',
        );
        $entity2 = getItem('fieldactivityview', $entity->FieldActivityID, 'FieldActivityID');
        if($entity2 != NULL){
          $form["field_description"]['und'][0]['value']['#default_value'] = $entity2->fieldactivitydescription;
          $form["field_utc_offset"]['und']['#default_value'] = $entity2->utcoffset;
          $form["field_site_visit"]['und']['#default_value'] = $entity2->sitevisitid;
        }
      }
      else{
        drupal_goto('calibrations-view');
      }
    }
  }
  // ------------ Create New Deployment ---------------------
  else if($form_id == "create_new_deployment_entityform_edit_form"){
    // Equipment
    $options = array();
    db_set_active('iutah_equipment');

    // Check that activity type 'Deployment' exists. If not, add it.
    $result = db_select('activitytypecv', 't')
    ->fields('t')
    ->condition('Term', 'Deployment', '=')
    ->execute();
    $item = $result->fetchObject();
    if($item == NULL){
        db_insert('deploymenttypecv')
        ->fields(array('Term' => 'Deployment'))
        ->execute();
    }

    $result = db_select('equipmentview', 't')
    ->fields('t')
    ->orderBy('modelname', 'ASC')
    ->execute();
    for ($index = 0; $index < $result->rowCount(); $index++){
      $item = $result->fetchObject();
      $text = $item->modelname . ' (SN ' . ($item->equipmentserialnumber) . ')';
      $options[$item->equipmentid] = $text;
    }
    $form['field_equipment_serial_number']['und']['#options'] = $options;
    $form['field_equipment_serial_number']['und']['#default_value'] = NULL;
    db_set_active();

    // Deployment Type
    create_list('deploymenttypecv', 'Term', 'Term', 'field_deployment_type', $form, 1);

    // Parent Equipment
    $form['field_parent_equipment_id']['und']['#options'] = $options;
    $form['field_parent_equipment_id']['und']['#options'][NULL] = 'None';
    $form['field_parent_equipment_id']['und']['#default_value'] = NULL;

    // begin date
    $form['field_begin_date']['#attributes']['class'][]  = 'required';
    $form['field_end_date']['#attributes']['class'][]  = 'required';

    // preloads
    // Equipment
    if (isset($_GET["EquipmentID"])){
      $form["field_equipment_serial_number"]['und']['#default_value'] = $_GET["EquipmentID"];
    }

    // Site Visit
    if (isset($_GET["SiteID"])) {
      $entity = getItem('sites', $_GET["SiteID"], 'SiteID');
      if($entity != NULL){
        drupal_set_title(t("Create New Deployment at ". $entity->SiteName));
        $options = array();
        db_set_active('iutah_equipment');

        $result = db_select('sitevisitpicker', 'svp')
        ->fields('svp')
        ->condition('sitename' , $entity->SiteName ,'=')
        ->orderBy('date', 'DESC')
        ->execute();
        db_set_active();

        for ($index = 0; $index < $result->rowCount(); $index++){
          $item = $result->fetchObject();
          $options[$item->sitevisitid] = $item->sitename . " (" . $item->date.")";
        }

        if(!empty($options)){
          $form['field_site_visit']['und']['#options'] = $options;
          $form['field_site_visit']['und']['#default_value'] = NULL;
        }
        else{
          drupal_get_messages();
          drupal_set_message(t('There are no site visits at ' . $entity->SiteName. '. Please submit one.'), 'warning');
          drupal_goto('create-new-site-visit', array('query' => array('SiteID' => $_GET["SiteID"])));
        }
      }
      else{
        drupal_get_messages();
        drupal_set_message(t('No such site exists in the system.'), 'error');
        drupal_goto('sites-view');
      }
    }  
    else{
      add_site_visit_picker($form, $form_state);
    }
    
    if (isset($_GET["sitevisit"])) {
        $form["field_site_visit"]['und']['#default_value'] = $_GET["sitevisit"];
    }

    if (isset($_GET["entityId"])) {
      $form['entityID'] = array(
        '#value' => $_GET["entityId"],
        '#type' => 'hidden',
      );

      // Edit button and title
      $form['actions']['submit']['#value'] = "Save Changes";
      drupal_set_title("Edit Deployment Information");

      $entity = getItem('deploymentsview', $_GET["entityId"], 'deploymentid');

      if($entity != NULL){
          // Text fields   
        $form["field_equipment_serial_number"]['und']['#default_value'] = $entity->equipmentid;
        $form["field_site_visit"]['und']['#default_value'] = $entity->SiteVisitID;
        $form["field_begin_date"]['und'][0]['#default_value']['value']= date($entity->BeginDateRaw);
        $form["field_end_date"]['und'][0]['#default_value']['value']= date($entity->EndDateRaw);
        $form["field_parent_equipment_id"]['und']['#default_value']= $entity->ParentEquipmentID;
        $form["field_utc_offset"]['und']['#default_value'] = $entity->DeploymentUTCOffset;
        $form["field_deployment_type"]['und']['#default_value'] = $entity->deploymenttype;
        $form["field_currently_deployed"]['und']['#default_value'] = $entity->DeploymentCurrentlyDeployedInt;
        $form["field_description"]['und'][0]['value']['#default_value'] = $entity->deploymentdescription;
        $form["field_value"]['und'][0]['value']['#default_value'] = $entity->DeploymentHorizontalOffsetValue;
        $form["field_horizontal_offset_units_id"]['und'][0]['value']['#default_value'] = $entity->DeploymentHorizontalOffsetUnitsID;
        $form["field_horizontal_offset_descript"]['und'][0]['value']['#default_value'] = $entity->DeploymentHorizontalOffsetDescription;
        $form["field_vertical_offset_value"]['und'][0]['value']['#default_value'] = $entity->DeploymentVerticalOffsetValue;
        $form["field_vertical_offset_units_id"]['und'][0]['value']['#default_value'] = $entity->DeploymentVerticalOffsetUnitsID;
        $form["field_vertical_offset_descriptio"]['und'][0]['value']['#default_value'] = $entity->DeploymentVerticalOffsetDescription;
        $form["field_calibration_notes"]['und'][0]['value']['#default_value'] = $entity->deploymentnotes;
        //$form["field_schematic"]['und'][0]['value']['#default_value'] = $entity->EquipmentNotes;
        $form['FieldActivityID'] = array(
          '#value' => $entity->FieldActivityID,
          '#type' => 'hidden',
        );
      }
      else{
        drupal_set_message(t('No Deployment exists with the specified ID'), 'warning');
        drupal_goto('deployments-view');
      }
    }
    else{
      // Custom validation for field Term
      $form['field_deployment_type_term']['und']['#element_validate'] = array('select_text_validate');
      // End Date
      $form['field_end_date']['und'][0]['#default_value'] = array();
    }
  }
  // ------------ Create New Vendor ---------------------
  else if($form_id == "create_new_vendor_entityform_edit_form"){
    // Type
    create_list('vendortypecv', 'Term', 'Term', 'field_type', $form);

    

    if (isset($_GET["entityId"])) {
      $form['entityID'] = array(
        '#value' => $_GET["entityId"],
        '#type' => 'hidden',
      );

      // Edit button and title
      $form['actions']['submit']['#value'] = "Save Changes";
      drupal_set_title("Edit Vendor Information");

      $entity = getItem('vendors', $_GET["entityId"], 'VendorID');
      if($entity != NULL){
        // Text fields   
        $form["field_code"]['und'][0]['value']['#default_value'] = $entity->VendorCode;
        $form["field_name"]['und'][0]['value']['#default_value'] = $entity->VendorName;
        $form["field_type"]['und']['#default_value']= $entity->VendorType;
        $form["field_contact_name"]['und'][0]['value']['#default_value']= $entity->VendorContactName;
        $form["field_phone"]['und'][0]['value']['#default_value'] = $entity->VendorPhone;
        $form["field_address"]['und'][0]['value']['#default_value'] = $entity->VendorAddress;
        $form["field_email"]['und'][0]['email']['#default_value'] = $entity->VendorEmail;
        $form["field_website"]['und'][0]['#default_value'] = array('url' => $entity->VendorWebsite);
      }
    }
  }
  // ------------ Create New Sensor Output Variable ---------------------
  else if($form_id == "create_new_sensor_output_variabl_entityform_edit_form"){
    create_list('equipmentmodels', 'ModelID', 'ModelName', 'field_model', $form);

    if (isset($_GET["entityId"])) {
      $form['entityID'] = array(
        '#value' => $_GET["entityId"],
        '#type' => 'hidden',
      );

      // Edit button and title
      $form['actions']['submit']['#value'] = "Save Changes";
      drupal_set_title("Edit Sensor Output Variable Information");

      $entity = getItem('sensoroutputvariables', $_GET["entityId"], 'SensorOutputVariableID');
      if ($entity != NULL){
        // Text fields   
        $form["field_model"]['und']['#default_value'] = $entity->ModelID;
        $form["field_variable_name"]['und'][0]['value']['#default_value'] = $entity->SensorVariableName;
        $form["field_variable_code"]['und'][0]['value']['#default_value']= $entity->SensorVariableCode;
        $form["field_resolution"]['und'][0]['value']['#default_value']= $entity->SensorResolution;
        $form["field_accuracy"]['und'][0]['value']['#default_value'] = $entity->SensorAccuracy;
        $form["field_raw_output_units_id"]['und'][0]['value']['#default_value'] = $entity->SensorRawOutputUnitsID;
        $form["field_method_description"]['und'][0]['value']['#default_value'] = $entity->SensorMethodDescription;
      }
    }
  }
    // ------------ Create New Calibration Standard ---------------------
  else if($form_id == "create_new_person_entityform_edit_form"){
    if (isset($_GET["entityId"])) {
      $form['entityID'] = array(
        '#value' => $_GET["entityId"],
        '#type' => 'hidden',
      );

      // Edit button and title
      $form['actions']['submit']['#value'] = "Save Changes";
      drupal_set_title("Edit Person Information");

      $entity = getItem('people', $_GET["entityId"], 'PersonID');
      if ($entity != NULL){
        // Text fields   
        $form["field_first_name"]['und'][0]['value']['#default_value'] = $entity->PersonFirstName;
        $form["field_last_name"]['und'][0]['value']['#default_value'] = $entity->PersonLastName;
        $form["field_organization"]['und'][0]['value']['#default_value']= $entity->PersonOrganization;
        $form["field_address"]['und'][0]['value']['#default_value']= $entity->PersonAddress;
        $form["field_phone"]['und'][0]['value']['#default_value'] = $entity->PersonPhone;
        $form["field_email"]['und'][0]['email']['#default_value'] = $entity->PersonEmail;
      }
    }
  }
  // ------------ Create New Equipment Model ---------------------
  else if($form_id == "create_new_equipment_model_entityform_edit_form"){
    // Manufacturer
    create_list('vendors', 'VendorID', 'VendorName', 'field_manufacturer', $form);
    if (isset($_GET["entityId"])) {
      $form['entityID'] = array(
        '#value' => $_GET["entityId"],
        '#type' => 'hidden',
      );

      // Edit button and title
      $form['actions']['submit']['#value'] = "Save Changes";
      drupal_set_title("Edit Equipment Model Information");

      $entity = getItem('equipmentmodels', $_GET["entityId"], 'ModelID');
      if($entity != NULL){
          // Text fields   
        $form["field_model_name"]['und'][0]['value']['#default_value'] = $entity->ModelName;
        $form["field_part_number"]['und'][0]['value']['#default_value'] = $entity->ModelPartNumber;
        $form["field_manufacturer"]['und']['#default_value']= $entity->ModelManufacturerID;
        $form["field_model_link"]['und'][0]['#default_value']= array('url' => $entity->ModelLink);
        $form["field_description"]['und'][0]['value']['#default_value'] = $entity->ModelDescription;
        $form["field_notes"]['und'][0]['value']['#default_value'] = $entity->ModelNotes;
      }
    }
  }
  // ------------ Create New Calibration Standard ---------------------
  else if($form_id == "create_new_calibration_standard_entityform_edit_form"){
    // Manufacturer
    create_list('vendors', 'VendorID', 'VendorName', 'field_vendor', $form);

    // Vendor Type
    create_list('calibrationstandardtypecv', 'Term', 'Term', 'field_type', $form);

    // Dates
    $form['field_expiration_date']['und'][0]['#default_value'] = array();
    $form['field_purchase_date2']['und'][0]['#default_value'] = array();

    if (isset($_GET["entityId"])) {
      $form['entityID'] = array(
        '#value' => $_GET["entityId"],
        '#type' => 'hidden',
      );

      // Edit button and title
      $form['actions']['submit']['#value'] = "Save Changes";
      drupal_set_title("Edit Calibration Standard Information");

      $entity = getItem('calibrationstandards', $_GET["entityId"], 'CalibrationStandardID');
      if($entity != NULL){
        // Text fields   
        $form["field_vendor"]['und']['#default_value'] = $entity->CalibrationStandardVendorID;
        $form["field_type"]['und']['#default_value'] = $entity->CalibrationStandardType;
        $form["field_value_double"]['und'][0]['value']['#default_value']= $entity->CalibrationStandardValue;
        $form["field_units"]['und'][0]['value']['#default_value']= $entity->CalibrationStandardUnits;
        $form["field_lot_code"]['und'][0]['value']['#default_value'] = $entity->CalibrationStandardLotCode;
        $form["field_expiration_date"]['und'][0]['#default_value']['value'] = $entity->CalibrationStandardExpirationDate;
        $form["field_purchase_date2"]['und'][0]['#default_value']['value']= $entity->CalibrationStandardPurchaseDate;
      }
    }
  }
  // ------------ Create New Equipment Type ---------------------
  else if($form_id == "create_new_equipment_type_entityform_edit_form"){
    if (isset($_GET["entityId"])) {
      $form['entityID'] = array(
        '#value' => $_GET["entityId"],
        '#type' => 'hidden',
      );

      // Edit button and title
      $form['actions']['submit']['#value'] = "Save Changes";
      drupal_set_title("Edit Equipment Type Information");

      $entity = getItem('equipmenttypecv', $_GET["entityId"], 'Term');
      // Text fields   
      if($entity != NULL){
        $form["field_term"]['und'][0]['value']['#default_value'] = $entity->Term;
        $form["field_definition"]['und'][0]['value']['#default_value']= $entity->Definition;
      }
    }
    else{
      // Custom validation for field Term
      $form['field_term']['und']['#element_validate'] = array('select_text_validate');
    }
  }
  // ------------ Create New Activity Type ---------------------
  else if($form_id == "create_new_activity_type_entityform_edit_form"){
    if (isset($_GET["entityId"])) {
      $form['entityID'] = array(
        '#value' => $_GET["entityId"],
        '#type' => 'hidden',
      );

      // Edit button and title
      $form['actions']['submit']['#value'] = "Save Changes";
      drupal_set_title("Edit Activity Type Information");

      $entity = getItem('activitytypecv', $_GET["entityId"], 'Term');
      // Text fields  
      if($entity != NULL){
        $form["field_term"]['und'][0]['value']['#default_value'] = $entity->Term;
        $form["field_definition"]['und'][0]['value']['#default_value']= $entity->Definition;
      } 
    }
    else{
      // Custom validation for field Term
      $form['field_term']['und']['#element_validate'] = array('select_text_validate');
    }
  }
  // ------------ Create New Deployment Type ---------------------
  else if($form_id == "create_new_deployment_type_entityform_edit_form"){
    if (isset($_GET["entityId"])) {
      $form['entityID'] = array(
        '#value' => $_GET["entityId"],
        '#type' => 'hidden',
      );

      // Edit button and title
      $form['actions']['submit']['#value'] = "Save Changes";
      drupal_set_title("Edit Deployment Type Information");

      $entity = getItem('deploymenttypecv', $_GET["entityId"], 'Term');

      if ($entity != NULL){
        $form["field_term"]['und'][0]['value']['#default_value'] = $entity->Term;
        $form["field_definition"]['und'][0]['value']['#default_value']= $entity->Definition;
      }
    }
    else{
      // Custom validation for field Term
      $form['field_term']['und']['#element_validate'] = array('select_text_validate');
    }
  }
  // ------------ Create New Vendor Type ---------------------
  else if($form_id == "create_new_vendor_type_entityform_edit_form"){
    if (isset($_GET["entityId"])) {
      $form['entityID'] = array(
        '#value' => $_GET["entityId"],
        '#type' => 'hidden',
      );

      // Edit button and title
      $form['actions']['submit']['#value'] = "Save Changes";
      drupal_set_title("Edit Vendor Type Information");

      $entity = getItem('vendortypecv', $_GET["entityId"], 'Term');
      // Text fields   
      if ($entity != NULL){
        $form["field_term"]['und'][0]['value']['#default_value'] = $entity->Term;
        $form["field_definition"]['und'][0]['value']['#default_value']= $entity->Definition;
      }
    }
    else{
      $form['field_term']['und']['#element_validate'] = array('select_text_validate');
    }
  }
  // ------------ Create New Site Group ---------------------
  else if($form_id == "create_new_site_group_entityform_edit_form"){
    if (isset($_GET["entityId"])) {
      $form['entityID'] = array(
        '#value' => $_GET["entityId"],
        '#type' => 'hidden',
      );

      // Edit button and title
      $form['actions']['submit']['#value'] = "Save Changes";
      drupal_set_title("Edit Site Group Information");

      $entity = getItem('sitegroups', $_GET["entityId"], 'SiteGroupID');
      // Text fields   
      if ($entity != NULL){
        $form["field_name"]['und'][0]['value']['#default_value'] = $entity->SiteGroupName;
        $form["field_description"]['und'][0]['value']['#default_value']= $entity->SiteGroupDescription;
      }
    }
  }
  // ------------ Create New Calibration Method ---------------------
  else if($form_id == "create_new_calibration_method_entityform_edit_form"){
    if (isset($_GET["entityId"])) {
      $form['entityID'] = array(
        '#value' => $_GET["entityId"],
        '#type' => 'hidden',
      );

      // Edit button and title
      $form['actions']['submit']['#value'] = "Save Changes";
      drupal_set_title("Edit Calibration Method Information");

      $entity = getItem('calibrationmethods', $_GET["entityId"], 'CalibrationMethodID');
      // Text fields   
      if ($entity != NULL){
        $form["field_name2"]['und'][0]['value']['#default_value'] = $entity->CalibrationMethodName;
        $form["field_description"]['und'][0]['value']['#default_value']= $entity->CalibrationMethodDescription;
      }
    }
  }
  // ------------ Create New Site Type ---------------------
  else if($form_id == "create_new_site_type_entityform_edit_form"){

    if (isset($_GET["entityId"])){
      $form['entityID'] = array(
        '#value' => $_GET["entityId"],
        '#type' => 'hidden',
      );

      // Edit button and title
      $form['actions']['submit']['#value'] = "Save Changes";
      drupal_set_title("Edit Site Type Information");

      $entity = getItem('sitetypecv', $_GET["entityId"], 'Term');
      // Text fields   
      if ($entity != NULL){
        $form["field_term"]['und'][0]['value']['#default_value'] = $entity->Term;
        $form["field_definition"]['und'][0]['value']['#default_value']= $entity->Definition;
      }
    }
    else{
      $form['field_term']['und']['#element_validate'] = array('select_text_validate');
    }
  }
  // ------------ Create New Calibration Standard Type ---------------------
  else if($form_id == "create_new_calibration_std_type_entityform_edit_form"){
    if (isset($_GET["entityId"])) {
      $form['entityID'] = array(
        '#value' => $_GET["entityId"],
        '#type' => 'hidden',
      );

      // Edit button and title
      $form['actions']['submit']['#value'] = "Save Changes";
      drupal_set_title("Edit Calibration Standard Type Information");

      $entity = getItem('calibrationstandardtypecv', $_GET["entityId"], 'Term');
      // Text fields   
      if($entity != NULL){
        $form["field_term"]['und'][0]['value']['#default_value'] = $entity->Term;
        $form["field_definition"]['und'][0]['value']['#default_value']= $entity->Definition;  
      }
    }
    else{
      $form['field_term']['und']['#element_validate'] = array('select_text_validate');
    }
  }
  // ------------ Create New Deployment Measured Variable ---------------------
  else if($form_id == "create_new_deployment_measured_v_entityform_edit_form"){
    // Deployment
    $options = array();
    db_set_active('iutah_equipment');
    $result = db_select('deploymentsview', 'd')
        ->fields('d')
        ->execute();
    for ($index = 0; $index < $result->rowCount(); $index++){
      $deployment = $result->fetchObject();
      
      if($deployment->equipmenttype == 'Sensor' || $deployment->equipmenttype == 'Datalogger'){
        $options[$deployment->deploymentid] = $deployment->SiteCode . ' (' . $deployment->begindate . ') - ' . $deployment->modelname . ' (SN:' . $deployment->equipmentserialnumber . ')';
      }
    }

    $form['field_deployment']['und']['#options'] =  $options;
    $form['field_deployment']['und']['#default_value'] = NULL;

    // Sensor Output Variable
    $options = array();
    $options[-1] = "New...";
    db_set_active('iutah_equipment');
    $result = db_select('sensoroutputvariables', 'f')
    ->fields('f')
    ->execute();
    db_set_active();

    for ($index = 0; $index < $result->rowCount(); $index++){
      $item = $result->fetchObject();
      $options[$item->SensorOutputVariableID] = $item->SensorVariableCode . " - " . $item->SensorVariableName;
    }
    $form['field_sensor_output_variable']['und']['#options'] =  $options;
    $form['field_sensor_output_variable']['und']['#default_value'] = NULL;

    //Preloads
    if (isset($_GET["DeploymentID"])) {
      $form["field_deployment"]['und']['#default_value'] = $_GET["DeploymentID"];
    }

    if (isset($_GET["SiteID"])) { 
      $entity = getItem('sites', $_GET["SiteID"], 'SiteID');
      drupal_set_title('Create New Deployment Measured Variable at ' . $entity->SiteName);
      // Deployment
      $options = array();
      db_set_active('iutah_equipment');
      $result = db_select('deploymentsview', 'd')
          ->fields('d')
          ->condition('siteid', $_GET["SiteID"], '=')
          ->execute();
      for ($index = 0; $index < $result->rowCount(); $index++){
        $deployment = $result->fetchObject();
        $options[$deployment->deploymentid] = $deployment->SiteCode . ' (' . $deployment->begindate . ') - ' . $deployment->modelname . ' (SN:' . $deployment->equipmentserialnumber . ')';
      }

      if($options != NULL){
        $form['field_deployment']['und']['#options'] =  $options;
        $form['field_deployment']['und']['#default_value'] = NULL;
      }
      //redirect to create new deployment
      else{
        drupal_set_message(t('There are no deployments at ' .$entity->SiteName . '. Please submit a new one.'), 'drupal_goto');
        //warning('create-new-deployment', array('query' => array('SiteID' => $_GET["SiteID"])));
      }
      db_set_active();
    }

    if (isset($_GET["entityId"])) {
      $form['entityID'] = array(
        '#value' => $_GET["entityId"],
        '#type' => 'hidden',
      );

      // Edit button and title
      $form['actions']['submit']['#value'] = "Save Changes";
      drupal_set_title("Edit Deployment Measured Value");

      $entity = getItem('deploymentmeasuredvariables', $_GET["entityId"], 'DeploymentMeasuredVariableID');
      // Text fields   
      if ($entity != NULL){
        $form["field_deployment"]['und']['#default_value'] = $entity->DeploymentID;
        $form["field_sensor_output_variable"]['und']['#default_value']= $entity->SensorOutputVariableID;
        $form["field_equation_used"]['und'][0]['value']['#default_value']= $entity->MeasuredVariableEquationUsed;
        $form["field_value_multiplier"]['und'][0]['value']['#default_value']= $entity->MeasuredVariableValueMultiplier;
        $form["field_value_offset"]['und'][0]['value']['#default_value']= $entity->MeasuredVariableValueOffset;
        $form["field_recorded_statistic"]['und'][0]['value']['#default_value']= $entity->MeasuredVariableRecordedStatistic;
        $form["field_notes"]['und'][0]['value']['#default_value']= $entity->MeasuredVariableNotes;
      }
    }
  }
  // Create New Vertical Datum
  else if($form_id == "create_new_vertical_datum_entityform_edit_form"){
    if (isset($_GET["entityId"])) {
      $form['entityID'] = array(
        '#value' => $_GET["entityId"],
        '#type' => 'hidden',
      );

      // Edit button and title
      $form['actions']['submit']['#value'] = "Save Changes";
      drupal_set_title("Edit Vertical Datum Information");

      $form["field_new_value"]['und'][0]['value']['#default_value'] = $_GET["entityId"];
    }
  }
  // Create New Retrieval
  else if($form_id == "create_new_retrieval_entityform_edit_form"){
    $DeploymentEntity = getItem('deployments', $_GET["entityId"], 'DeploymentID');

    // -----Begin Error test cases ------
    if(!$DeploymentEntity){
      drupal_set_message(t('Select a valid deployment to retrieve'), 'warning');
      drupal_goto('deployments-view');
    }
    else if($DeploymentEntity->DeploymentCurrentlyDeployed == 0){
      drupal_set_message(t('The selected deployment is not currently deployed.'), 'error');
      drupal_goto('deployments-view');      
    }
    // -----End Error test cases ------

    $form['DeploymentID'] = array(
      '#value' => $_GET["entityId"],
      '#type' => 'hidden',
    );

    $SiteEntity = getItem('sites', $DeploymentEntity->SiteID, 'SiteID');
    add_site_visit_picker($form, $form_state, $SiteEntity->SiteName);

    $form['SiteID'] = array(
      '#value' => $SiteEntity->SiteID,
      '#type' => 'hidden',
    );

    $form['field_site_visit']['und']['#options']['-1'] = 'New...';

    // Crew
    $options = array();
    db_set_active('iutah_equipment');
    $result = db_select('people', 'p')->fields('p')->execute();
    db_set_active();
    for ($index = 0; $index < $result->rowCount(); $index++){
      $item = $result->fetchObject();
      $options[$item->PersonID] = $item->PersonFirstName . " " . $item->PersonLastName;
    }
    db_set_active();
    $form['field_crew']['und']['#options'] = $options;
    $form['field_crew']['und']['#multiple'] = TRUE;

    // Add 'required' class since the module wont do it due to an error
    $form['field_begin_date_time']['#attributes']['class'][]  = 'required';
    $form['field_end_date_time']['#attributes']['class'][]  = 'required';
    $form['field_begin_date']['#attributes']['class'][]  = 'required';
    $form['field_end_date']['#attributes']['class'][]  = 'required';

    // Add titles to separate the parts of the form
    $form['lblSiteVisit'] = array(
      '#markup' => '<h3>Site Visit</h3>'
    );

    $form['lblFieldActivity'] = array(
      '#markup' => '<br><h3>Retrieval Activity</h3>',
      '#weight' => 16,
    );
  }
}

// callback for ajax
function db_connect_serial_number_callback($form, $form_state) {
  return $form['field_deployment'];
}

// callback for ajax
function db_connect_site_visits_callback($form, $form_state) {
  return $form['field_site_visit'];
}

// callback for ajax
function db_connect_equipment_callback($form, $form_state) {
  return $form['field_equipment_serial_number'];
}

// callback for ajax
function db_connect_measured_variable_callback($form, $form_state) {
  return $form['field_measured_variable'];
}

function add_measured_variable_filter(&$form, &$form_state){
  // Add AJAX 
  $form['field_measured_variable']['#prefix'] = '<div id="measured-variable-div">';
  $form['field_measured_variable']['#suffix'] = '</div>';

  $form['field_equipment_serial_number']['und']['#ajax'] = array(
    'callback' => 'db_connect_measured_variable_callback', // function that returns new element
    'wrapper' => 'measured-variable-div', // where to return the changes
    'effect' => 'fade',
  );

  //Filter Measured Variables by equipment
  if (isset($form_state['values']['field_equipment_serial_number']['und'][0]['value'])){
    db_set_active('iutah_equipment');
    $equipmentID = $form_state['values']['field_equipment_serial_number']['und'][0]['value'];
    $deployment = getItem('deployments', $equipmentID, 'EquipmentID');

    // Measured Variable
    $options = array();
    $options[-1] = "New...";
    db_set_active('iutah_equipment');
    $result = db_select('measuredvariablepicker', 'f')
    ->fields('f')
    ->execute();
    
    for ($index = 0; $index < $result->rowCount(); $index++){
      $item = $result->fetchObject();
      if($item->DeploymentID == $deployment->DeploymentID){
           $options[$item->DeploymentMeasuredVariableID] = $item->SensorVariableCode . " - " . $item->SensorVariableName;
      }
      //$options[1] = $deployment->DeploymentID;
    }
    $form['field_measured_variable']['und']['#options'] =  $options;
    $form['field_measured_variable']['und']['#default_value'] = NULL;
    db_set_active();

  }
}

function add_equipment_filter(&$form, &$form_state, $siteName = ""){
  // Add AJAX for Equipment Filter in Calibrations
  $form['field_equipment_serial_number']['#prefix'] = '<div id="equipment-div">';
  $form['field_equipment_serial_number']['#suffix'] = '</div>';

  $form['field_site_visit']['und']['#ajax'] = array(
    'callback' => 'db_connect_equipment_callback', // function that returns new element
    'wrapper' => 'equipment-div', // where to return the changes
    'effect' => 'fade',
  );

  //Filter Equipment by site visit
  if (isset($form_state['values']['field_site_visit'])){
    //drupal_set_message($form_state['values']['field_site_visit']['und'][0]['value']);
    $SiteVisitID = $form_state['values']['field_site_visit']['und'][0]['value'];

    //Equipment
    $options = array();
    db_set_active('iutah_equipment');
    $result = db_select('deploymentsview', 't')
    ->fields('t')
    ->condition('currentlydeployed', 'Yes', '=')
    ->condition('SiteVisitID', $SiteVisitID, '=')
    ->orderBy('equipmentserialnumber', 'ASC')
    ->execute();
    for ($index = 0; $index < $result->rowCount(); $index++){
      $item = $result->fetchObject();
      $options[$item->equipmentid] = $item->modelname . " (SN ". $item->equipmentserialnumber . ")";
    }

    $form['field_equipment_serial_number']['und']['#options'] = $options;
    $form['field_equipment_serial_number']['und']['#default_value'] = NULL;

    db_set_active();
  }
}

// Adds a site visit picker to a form
function add_site_visit_picker(&$form, &$form_state, $siteName = ""){
  // Add AJAX for Date Filter
  $form['field_site_visit']['#prefix'] = '<div id="equipment-site_visits-div">';
  $form['field_site_visit']['#suffix'] = '</div>';
  $form['field_site_visit']['und']['#default_value'] = NULL;

  $form['field_set'] = array(
    '#type' => 'fieldset',
    '#title' => t('Filter Site Visit Dates'),
    '#collapsible' => TRUE, 
    '#collapsed' => TRUE,
    '#weight' => $form['field_site_visit']['#weight'] + 0.5,  // Don't even ask...
  );

  $form['field_set']['field_site_visit_date'] = array();
  $form['field_set']['field_site_visit_date']['#type'] = 'date_popup';
  $form['field_set']['field_site_visit_date']['#date_format'] = 'Y-m-d';

  $form['field_set']['field_site_visit_date']['#ajax'] = array(
    'callback' => 'db_connect_site_visits_callback', // function that returns new element
    'wrapper' => 'equipment-site_visits-div', // where to return the changes
    'effect' => 'fade',
  );

  // Filter by date
  if(isset($form_state['values']['field_site_visit_date'])){

    $selected_date = date("Y/m/d", strtotime($form_state['values']['field_site_visit_date']['date']));

    // If date could not be accessed
    if ($selected_date == '1969/12/31'){
      $selected_date = date("Y/m/d", strtotime($form_state['values']['field_site_visit_date']));
    }

    $options = array();
    db_set_active('iutah_equipment');

    $result = db_select('sitevisitpicker', 'svp')
      ->fields('svp')
      ->condition('date' , $selected_date . "%", 'like')
      ->orderBy('date', 'DESC')
      ->execute();
    db_set_active();
      
    // Add options filtered by date
    for ($index = 0; $index < $result->rowCount(); $index++){
      $item = $result->fetchObject();
      $options[$item->sitevisitid] = $item->sitename . " (" . $item->date.")";
    }

    if(!empty($options)){
      $form['field_site_visit']['und']['#options'] = $options;
    }
    else{
      $form['field_site_visit']['und']['#options'] = array();
    }
  }
  // Add all options
  else{ 
      db_set_active('iutah_equipment');
      $result = db_select('sitevisitpicker', 'svp')
      ->fields('svp')
      ->orderBy('date', 'DESC')
      ->execute();
      db_set_active();
      $options = array();
      for ($index = 0; $index < $result->rowCount(); $index++){
        $item = $result->fetchObject();
        // Filter by site name if specified
        if ($siteName != ""){
          if($siteName == $item->sitename){
            $options[$item->sitevisitid] = $item->sitename . " (" . $item->date .")";
          } 
        }
        else{
          $options[$item->sitevisitid] = $item->sitename . " (" . $item->date .")";
        }
      }
      if($options == NULL){
        drupal_set_message(t('There are no site visits in the database.'), 'error');
      }
      $form['field_site_visit']['und']['#options'] = $options;
  }
}